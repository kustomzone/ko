#   0000000   0000000   00000000  00000000  00000000  00000000
#  000       000   000  000       000       000       000     
#  000       000   000  000000    000000    0000000   0000000 
#  000       000   000  000       000       000       000     
#   0000000   0000000   000       000       00000000  00000000

\S+                            text

[\<\>\+\-\=\/\*]               syntax.math

@                              syntax.this
\$                             syntax.this
\?                             syntax.cond
!=                             syntax.math
->                             syntax.function.marker
=>                             syntax.function.marker.bound

# braces

[\(\)\{\}\[\]]                 syntax.bracket

# require

(\w+|\{[^\}]+\})\s*=\s*(require)\s+
    require.variable
    keyword.require 

# class

(class)\s+(\w+)              . class.keyword . class

# globals

(\bconsole\.|\bprocess\.|\bglobal\.|\bmodule\.|\bexports\.|\bpath\.|\bfs\.|\bos\.)  . module

# special

\blog\b                        function.log
\berr\b                        variable.err
\berror\b                      function.err

# bool

true                           value.bool.true
false                          value.bool.false 

# null

null|undefined                 keyword.null

# class members

(@\w+)(?=\s*[\=\,\+\-\.\<\>\*\/\]\[\)]|\s*$)    class.variable

# .property

(\s*\w+)\.                     owner
\.(\s*\w+)                     property

# functions 

(\w+)\s*[=]\s*\([^\)]*\)\s*[-=]>    . function
(\w+)\s*[=]\s*[-=]>                 . function
(\w+)\s*[:]\s*\([^\)]*\)\s*[-=]>    . method
(\w+)\s*[:]\s*[-=]>                 . method
(\()([^\(\)]*)(\)\s*)[-=]>          . function.bracket . function.variable.argument . function.bracket

(\w+)(?=\(|\s+[@\w\d\"\'\(\[\{])      function.call
(@\w+)(?=\s+[\w\d@\"\'\(\[\{]|\()     class.function.call
(@?\w+)\s*\.\s*(\w+)\s*\([^\)]*\)   . class.callee . function.call
(@?\w+)\s*\.\s*(\w+)\s+\w+          . class.callee . function.call

# class construction

new\s+(\w+)                    class.callee
(@?\w+)\s*\=\s*new\s           class.object

# range

(\[).*(\.\.\.).*(\])         . range.bracket . range . range.bracket
(\[).*(\.\.).*(\])           . range.bracket . range . range.bracket

# dictionary key

(\S+)\s*(:)                  . dictionary.key . dictionary.key.marker

# exists?

\S+(\?)                        syntax.exists

# punctuation

[\,\.\;]                       syntax.punctuation

# lodash

(_)\.(\w+)                   . lodash.marker . lodash.function

# keywords

(^|\s)(if|else|then|for|of|in|is|while|do|unless|not|or|and|try|catch|return|require|break|continue|new|switch|when|super|extends)(\s|$)  
    none 
    keyword 
    none
    
__dirname|__filename  keyword

#number

(?:^|[^\.\"\'\w]|\.\.\.?)([\+\-]?)(\d+\.\d+)(?:$|[^\.\"\'\w]|\.\.\.?)   
    syntax.value.number.float.sign
    value.number.float

(?:^|[^\.\"\'\w]|\.\.\.?)([\+\-]?)(\d+)(?:$|[^\.\"\'\w]|\.\.\.?)   
    syntax.value.number.int.sign
    value.number.int

# strings
(')([^'\\]*)(')              . string.marker.single . value.string.single . string.marker.single
(")([^"\\]*)(")              . string.marker.double . value.string.double . string.marker.double
# (")((?:[^"\#\\]*|\\["\\bfnrt\/])*)(")   . string.marker.double . value.string . string.marker.double

# (")([^"\#]*)(\#\{)   . string.marker.double . value.string . interpolation.marker
# (\})([^"\#]*)(")     . interpolation.marker . value.string . string.marker.double
# (\})([^"\#]*)(\#\{)  . interpolation.marker . value.string . interpolation.marker
    
"""                            string.marker.triple

# comments

|###|                          comment.marker
(?:^|\s+)(#+)([^\{].*|$)     . comment.marker . comment

# salter headers
^\s*(\#)([0\s]+)$            . header.comment.marker . comment.header
^([0\s]+)$                     comment.header
